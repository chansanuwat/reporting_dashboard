var exports = module.exports = {};

// Get result summary for test
exports.getTestSummary = function(req,id, callback) {
    var db = req.db;
    var resultCollection = db.get('results');
    var ObjectId = require('mongodb').ObjectID;
    resultCollection.find({"test_id": new ObjectId(id)},{},function(e,docs){
        if(docs != null) {
            summary = {'total': docs.length, 'failed': 0, 'passed': 0, 'skipped': 0};
            docs.forEach(function(result){
                summary[result['result']] += 1;
            });
        };
        callback(summary);
    });
};

// Get single test with summary
exports.getTest = function(req, query, callback) {
    var db = req.db;
    var testCollection = db.get('tests');
    testCollection.findOne(query,{},function(e,doc){
        if(e || doc === null){
            callback({});
        }
        else {
            exports.getTestSummary(req,doc._id, function(summary){
                doc['summary'] = summary;
                callback(doc);
            });
        };
    });
}

// Get list of tests with summaries
exports.getTests = function(query, options, req, callback) {
    var db = req.db;
    var results = [];
    
    var testCollection = db.get('tests');
    testCollection.find(query,options,function(e,docs){
        results = docs;
        if(e || docs === null){
            callback([]);
        }
        else {
            exports.addSummaries(req,docs,function(results){
                callback(results);
            });
        }
    });
}

// Add summary for test
exports.addSummaries = function(req,tests,next){
    var processed = 0;
    if(tests.length > 0){
        tests.forEach((doc,index,array) => {
            exports.getTestSummary(req,doc._id, function(summary){
                doc['summary'] = summary;
                processed ++;
                if(processed === array.length){
                    next(tests);
                }
            });
        });
    }
    else {
        next([]);
    }
}

exports.getTestResults = function(req, withNotes, callback) {
    options = {
        _id: 1,
        scenario_id: 1,
        test_id: 1,
        result: 1,
        message: 1,
        duration: 1,
    }
    if(withNotes){
       options['notes'] = 1 
    }
    var db = req.db;
    var testId = req.params.id;
    var ObjectId = require('mongodb').ObjectID;
    var resultsCollection = db.get('results');
    resultsCollection.col.aggregate([
        {$project: options },
        {$match: {test_id: new ObjectId(testId)}},
        {$lookup: {from: "scenarios",localField: "scenario_id",foreignField: "_id", as: "scenario"}},
        {$unwind: "$scenario"}], function(e,docs){
            callback(docs);
    });
}

exports.getTestResult = function(req, callback) {
    var db = req.db;
    var resultId = req.params.id;
    var ObjectId = require('mongodb').ObjectID;
    var resultsCollection = db.get('results');
    resultsCollection.col.aggregate([
        {$match: {_id: new ObjectId(resultId)}},
        {$lookup: {from: "scenarios",localField: "scenario_id",foreignField: "_id", as: "scenario"}},
        {$unwind: "$scenario"}], function(e,docs){
        callback(docs[0]);
    });
}